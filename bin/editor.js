// Generated by CoffeeScript 1.3.3
(function() {
  var DRAGGING, RADIUS, jsonify, repaint;

  $.fn.reverse = [].reverse;

  RADIUS = 8.0;

  DRAGGING = {
    A: 1,
    B: 2
  };

  repaint = function() {
    $("#paper").clearCanvas();
    $(".ui-node").each(function() {
      var fill, letter, px, py, stroke;
      px = Number($(this).find(".x").val()) / 2.0;
      py = Number($(this).find(".y").val()) / 2.0;
      stroke = $(this).find(".stroke").val();
      stroke = stroke === "" ? "#000000" : "#" + stroke;
      fill = $(this).find(".fill").val();
      fill = fill === "" ? void 0 : "#" + fill;
      $("#paper").drawArc({
        strokeWidth: 4.0,
        strokeStyle: stroke,
        fillStyle: fill,
        x: px,
        y: py,
        radius: RADIUS
      });
      letter = null;
      if ($(this).find('[name="starting"]').is(":checked")) {
        letter = "S";
      }
      if ($(this).find('[name="ending"]').is(":checked")) {
        letter = "E";
      }
      if (letter != null) {
        return $("#paper").drawText({
          fillStyle: "#000000",
          strokeStyle: "#ffffff",
          strokeWidth: 1.0,
          x: px,
          y: py,
          font: "10pt",
          text: letter
        });
      }
    });
    return $(".ui-obstacle").each(function() {
      var pax, pay, pbx, pby;
      pax = Number($(this).find(".ax").val()) / 2.0;
      pay = Number($(this).find(".ay").val()) / 2.0;
      pbx = Number($(this).find(".bx").val()) / 2.0;
      pby = Number($(this).find(".by").val()) / 2.0;
      return $("#paper").drawLine({
        strokeStyle: "#ffffff",
        strokeWidth: 4.0,
        x1: pax,
        y1: pay,
        x2: pbx,
        y2: pby
      }).drawArc({
        fillStyle: "#ffffff",
        x: pax,
        y: pay,
        radius: 4.0
      }).drawArc({
        fillStyle: "#ffffff",
        x: pbx,
        y: pby,
        radius: RADIUS / 2.0
      });
    });
  };

  jsonify = function() {
    var result;
    result = "";
    result += "{\n";
    result += "  nodes: [\n";
    $(".ui-node").each(function(index) {
      var ending, fill, starting, stroke;
      if (index) {
        result += ",\n";
      }
      result += "    {\n";
      result += "      \"x\": " + (Number($(this).find(".x").val()));
      result += ",\n";
      result += "      \"y\": " + (Number($(this).find(".y").val()));
      stroke = $(this).find(".stroke").val();
      if (stroke !== "") {
        result += ",\n";
        result += "      \"stroke\": \"" + stroke + "\"";
      }
      fill = $(this).find(".fill").val();
      if (fill !== "") {
        result += ",\n";
        result += "      \"fill\": \"" + fill + "\"";
      }
      starting = $(this).find('[name="starting"]').is(":checked");
      if (starting) {
        result += ",\n";
        result += "      \"starting\": true";
      }
      ending = $(this).find('[name="ending"]').is(":checked");
      if (ending) {
        result += ",\n";
        result += "      \"ending\": true";
      }
      return result += "\n    }";
    });
    result += "\n  ],\n";
    result += "  obstacles: [\n";
    $(".ui-obstacle").each(function(index) {
      if (index) {
        result += ",\n";
      }
      result += "    {\n";
      result += "      \"ax\": " + (Number($(this).find(".ax").val())) + ",\n";
      result += "      \"ay\": " + (Number($(this).find(".ay").val())) + ",\n";
      result += "      \"bx\": " + (Number($(this).find(".bx").val())) + ",\n";
      result += "      \"by\": " + (Number($(this).find(".by").val())) + "\n";
      return result += "    }";
    });
    result += "\n  ]\n";
    result += "}";
    return result;
  };

  $(document).ready(function() {
    var clamp, dragged, prevX, prevY;
    $("#ui-add-node").click(function() {
      $(this).parent().parent().before('\
			<tr class="ui-node">\
				<td><input class="x" placeholder="x" style="width: 40px" value="512" /></td>\
				<td><input class="y" placeholder="y" style="width: 40px" value="512" /></td>\
				<td><input class="stroke" placeholder="000000" style="width: 80px" /></td>\
				<td><input class="fill" placeholder="undefined" style="width: 80px" /></td>\
				<td><input name="starting" type="radio" /></td>\
				<td><input name="ending" type="radio" /></td>\
				<td><button class="ui-remove">X</button></td>\
			</tr>\
		');
      return repaint();
    });
    $("#ui-add-obstacle").click(function() {
      $(this).parent().parent().before('\
			<tr class="ui-obstacle">\
				<td><input class="ax" placeholder="x" value="256"/></td>\
				<td><input class="ay" placeholder="y" value="512"/></td>\
				<td><input class="bx" placeholder="x" value="768"/></td>\
				<td><input class="by" placeholder="y" value="512"/></td>\
				<td><button class="ui-remove">X</button></td>\
			</tr>\
		');
      return repaint();
    });
    $(document).on("click", ".ui-remove", function() {
      $(this).parent().parent().remove();
      return repaint();
    });
    $(document).on("click keypress change", "#ui input", function() {
      return repaint();
    });
    $(document).on("mousedown", '#ui input[type="radio"]', function() {
      var $self, uncheck;
      $self = $(this);
      if ($self.is(":checked")) {
        uncheck = function() {
          setTimeout(function() {
            $self.removeAttr("checked");
            return repaint();
          }, 0);
          return $self.off("mouseup", uncheck);
        };
        return $self.on("mouseup", uncheck);
      }
    });
    clamp = false;
    $(window).keydown(function(event) {
      if (event.which === 17) {
        return clamp = true;
      }
    });
    $(window).keyup(function(event) {
      if (event.which === 17) {
        return clamp = false;
      }
    });
    dragged = null;
    prevX = prevY = 0;
    $("#paper").mousedown(function(event) {
      var cx, cy;
      cx = event.offsetX;
      cy = event.offsetY;
      $(".ui-node").reverse().each(function() {
        var px, py, x, y;
        px = $(this).find(".x").val() / 2.0;
        py = $(this).find(".y").val() / 2.0;
        x = (px - cx) * (px - cx);
        y = (py - cy) * (py - cy);
        if (x + y < RADIUS * RADIUS) {
          dragged = $(this);
          return false;
        }
      });
      if (dragged != null) {
        return;
      }
      return $(".ui-obstacle").reverse().each(function() {
        var da, db, pax, pay, pbx, pby;
        pax = $(this).find(".ax").val() / 2.0;
        pay = $(this).find(".ay").val() / 2.0;
        da = (pax - cx) * (pax - cx) + (pay - cy) * (pay - cy);
        if (da < RADIUS * RADIUS / 4.0) {
          dragged = $(this);
          dragged.which = DRAGGING.A;
          return false;
        }
        pbx = $(this).find(".bx").val() / 2.0;
        pby = $(this).find(".by").val() / 2.0;
        db = (pbx - cx) * (pbx - cx) + (pby - cy) * (pby - cy);
        if (db < RADIUS * RADIUS / 4.0) {
          dragged = $(this);
          dragged.which = DRAGGING.B;
          return false;
        }
      });
    }).mouseup(function(event) {
      return dragged = null;
    }).mousemove(function(event) {
      var $x, $y, dx, dy, newX, newY;
      dx = event.offsetX - prevX;
      dy = event.offsetY - prevY;
      prevX = event.offsetX;
      prevY = event.offsetY;
      if (dragged == null) {
        return;
      }
      if (dragged.hasClass("ui-node")) {
        $x = dragged.find(".x");
        $y = dragged.find(".y");
      }
      if (dragged.hasClass("ui-obstacle")) {
        if (dragged.which & DRAGGING.A) {
          $x = dragged.find(".ax");
          $y = dragged.find(".ay");
        }
        if (dragged.which & DRAGGING.B) {
          $x = dragged.find(".bx");
          $y = dragged.find(".by");
        }
      }
      newX = Number($x.val()) + dx * 2;
      newY = Number($y.val()) + dy * 2;
      if (clamp) {
        $x.val((event.offsetX - event.offsetX % 32) * 2);
        $y.val((event.offsetY - event.offsetY % 32) * 2);
      } else {
        $x.val(String(newX));
        $y.val(String(newY));
      }
      return repaint();
    });
    return $("#jsonify").click(function() {
      return window.prompt("Generated JSON", jsonify());
    });
  });

}).call(this);
